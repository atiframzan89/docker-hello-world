# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ master ]
  
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        name: checkout the code
      - name: Login to Artifactory Registory
        uses: docker/login-action@v1
        with:
          registry: connecttesth.jfrog.io
          username: ${{ secrets.JFROG_USERNAME }}
          password: ${{ secrets.JFROG_PASSWORD }}
      - name: docker build
        run: |
          docker build . --file dockerfile --tag connecttesth.jfrog.io/docker/wordpress:latest
      - name: docker push
        run: |
          docker push connecttesth.jfrog.io/docker/wordpress:latest
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        
        with:
          environment-variables: |
            WORDPRESS_DB_HOST = wordpressdb.co10epb4rry7.us-east-1.rds.amazonaws.com
            WORDPRESS_DB_NAME = wordpress
            WORDPRESS_DB_PASSWORD = wordpress
            WORDPRESS_DB_USER = admin
          #task-definition: task-definition.json
          container-name: wordpress-dev-ecs
          image: connecttesth.jfrog.io/docker/wordpress:latest

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: wordpress-dev-ecs
          cluster: wordpress-dev-ecs
          wait-for-service-stability: true
